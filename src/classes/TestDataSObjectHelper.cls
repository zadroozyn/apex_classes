public abstract class TestDataSObjectHelper {

	private String sObjectApiName;
	private boolean isNameAutoGenerated;
	private String mapByField;

	private Map<String, SObject> testSObjects {
		private get {
			if(this.testSObjects == null) {
				this.initialiseSObjectMap(this.queryCurrentSObject());
			}
			return this.testSObjects;
		}
		private set;
	}

	public TestDataSObjectHelper(String sObjectApiName, boolean isNameAutoGenerated) {
		this.sObjectApiName = sObjectApiName;
		this.isNameAutoGenerated = isNameAutoGenerated;
	}

	public TestDataSObjectHelper(String sObjectApiName, boolean isNameAutoGenerated, String mapByField) {
		this.sObjectApiName = sObjectApiName;
		this.isNameAutoGenerated = isNameAutoGenerated;
		this.mapByField = mapByField;
	}

	public SObject getSObject(String name) {
		return this.testSObjects.get(name);
	}

	public List<SObject> getSObjectsByField(String fieldName, String fieldValue) {
		List<sObject> returnValue = (List<sObject>)Type.forName('List<'+sObjectApiName+'>').newInstance();
		for(sObject current : this.testSObjects.values()) {
			if((String)current.get(fieldName) == fieldValue) {
				returnValue.add(current);
			}
		}
		return returnValue;
	}

	public Id getSObjectId(String name) {
		return this.testSObjects.get(name).Id;
	}

	public List<sObject> getAllSObjects() {
		List<sObject> returnValue = (List<sObject>)Type.forName('List<'+sObjectApiName+'>').newInstance();
		returnValue.addAll(testSObjects.values());
		return returnValue;
	}

	public List<Database.SaveResult> insertAll() {
		return Database.insert(this.testSObjects.values(), true);
	}

	public List<Database.UpsertResult> upsertAll() {
		return Database.upsert(getAllSObjects(), true);
	}

	public List<Database.SaveResult> updateAll() {
		return Database.update(this.testSObjects.values(), true);
	}

	public void refresh() {
		this.initialiseSObjectMap(this.queryCurrentSObject());
	}

	protected void initialiseSObjectMap(List<sObject> sObjectsToProcess){
		this.testSObjects = new Map<String, sObject>();
		for(sObject current : sObjectsToProcess){
			addSObjectToMap(current);
		}
	}

	protected abstract List<sObject> queryCurrentSObject();

	protected void addSObjectToMap(sObject value) {
		if(!String.isBlank(this.mapByField)) {
			this.testSObjects.put((String)value.get(this.mapByField), value);
		} else if(this.isNameAutoGenerated) {
			this.testSObjects.put(String.valueOf(this.testSObjects.values().size()), value);
		} else {
			this.testSObjects.put((String)value.get('Name'), value);
		}
	}
}