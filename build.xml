<project name="On AG Ant Tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>

    <property name="success-sound" value=""/>
    <property name="fail-sound" value=""/>

    <property name="listView-regexp" value="\s*\&lt;listViews>(\s|\&lt;fullName>\S*\&lt;\/fullName>|\&lt;booleanFilter>[\S ]*\&lt;\/booleanFilter>|\&lt;columns>\S*\&lt;\/columns>|\&lt;filters>\s*\&lt;field>\S*\&lt;\/field>\s*\&lt;operation>\S*\&lt;\/operation>\s*(\&lt;value>[\S ]*\&lt;\/value>)*\s*\&lt;\/filters>|\&lt;filterScope>[\S]*\&lt;\/filterScope>|\&lt;label>[\S ]*\&lt;\/label>|\&lt;queue>\S*\&lt;\/queue>|\&lt;language>[\S]*\&lt;\/language>|\&lt;sharedTo>(\s|\&lt;allInternalUsers>\&lt;\/allInternalUsers>|\&lt;role>\S*\&lt;\/role>|\&lt;group>\S*\&lt;\/group>|\&lt;roleAndSubordinatesInternal>\S*\&lt;\/roleAndSubordinatesInternal>|\&lt;roleAndSubordinates>\S*\&lt;\/roleAndSubordinates>)*\&lt;\/sharedTo>)*\&lt;\/listViews>" />
    <property name="permissionSet-regexp" value="\s*\&lt;objectPermissions>(\s*\&lt;(allowCreate|allowDelete|allowEdit|allowRead|modifyAllRecords)>(true|false)\&lt;\/(allowCreate|allowDelete|allowEdit|allowRead|modifyAllRecords)>)*\s*\&lt;object>(ActiveScratchOrg|NamespaceRegistry|ScratchOrgInfo)\&lt;\/object>\s*\&lt;viewAllRecords>(true|false)\&lt;\/viewAllRecords>\s*\&lt;\/objectPermissions>" />
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>
    <condition property="sf.resultPath" value=""> <not> <isset property="./result"/> </not> </condition>
    <condition property="path" value="src"> <not> <isset property="path"/> </not> </condition>
    <condition property="tests" value=""> <not> <isset property="tests"/> </not> </condition>
    <condition property="maxPoll" value="2000"> <not> <isset property="maxPoll"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="build/ant-salesforce.jar" />            
        </classpath>
    </taskdef>

    <macrodef name = "git">
        <attribute name = "command" />
        <attribute name = "dir" default = "" />
        <element name = "args" optional = "true" />
        <sequential>
            <echo message = "git @{command}" />
            <exec executable = "git" dir = "@{dir}">
                <arg value = "@{command}" />
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <target name="removeListView">
        <replaceregexp
            match="${listView-regexp}"
            replace=""
            flags="g">
            <fileset dir="${path}/objects/">
                <include name="*.object"/>
            </fileset>
        </replaceregexp>
        <replaceregexp
            match="${permissionSet-regexp}"
            replace=""
            flags="g">
            <fileset dir="${path}/permissionsets/">
                <include name="*.permissionset"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="listMetadata">
        <sf:listMetadata 
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            metadataType="${sf.metadataType}"
            resultFilePath="${sf.resultPath}"/>
    </target>

    <target name="describeMetadata">
        <sf:describeMetadata
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            resultFilePath="${sf.resultPath}"/>
    </target>

    <target name="prodSync">
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            retrieveTarget="${path}"
            unpackaged="${path}/package.xml"/>
        <delete>
            <fileSet dir="${path}/settings/">
                <include name="PersonalJourney.settings"/>
                <include name="Search.settings"/>
                <!--<include name="OrgPreference.settings"/>-->
            </fileSet>
            <fileSet dir="${path}/permissionsets/">
                <include name="Process_Builder.permissionset"/>
            </fileSet>
            <fileSet dir="${path}/workflows/">
                <include name="ActiveScratchOrg.workflow"/>
                <include name="ScratchOrgInfo.workflow"/>
            </fileSet>
        </delete>
        <replaceregexp
            file="${path}/settings/Case.settings"
            match="\s*\&lt;emailServicesAddress>[\S]*\&lt;\/emailServicesAddress>"
            replace=""
            flags="g"/>
        <replaceregexp
            file="${path}/settings/OrgPreference.settings"
            match="\s*\&lt;preferences>\s*\&lt;settingName>(ScratchOrgManagementPref|Packaging2|ExpandedSourceTrackingPref)\&lt;\/settingName>\s*\&lt;settingValue>(true|false)\&lt;\/settingValue>\s*\&lt;\/preferences>"
            replace=""
            flags="g"/>
        <replaceregexp
            file="${path}/settings/Activities.settings"
            match="\s*\&lt;meetingRequestsLogo>\S*&lt;\/meetingRequestsLogo>"
            replace=""
            flags="g"/>
        <replaceregexp
            match="\s*\&lt;userPermissions>\s*\&lt;enabled>(true|false)\&lt;\/enabled>\s*\&lt;name>(EditBillingInfo|ManageSandboxes|Packaging2PromoteVersion)\&lt;\/name>\s*\&lt;\/userPermissions>"
            replace=""
            flags="g">
            <fileSet dir="${path}/profiles/">
                <include name="*.profile"/>
            </fileSet>
        </replaceregexp>
        <replaceregexp
            match="${listView-regexp}"
            replace=""
            flags="g">
            <fileset dir="${path}/objects/">
                <include name="*.object"/>
            </fileset>
        </replaceregexp>
        <replaceregexp
            match="${permissionSet-regexp}"
            replace=""
            flags="g">
            <fileset dir="${path}/permissionsets/">
                <include name="*.permissionset"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="retrieve">
        <sf:retrieve
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            retrieveTarget="${path}"
            unpackaged="${path}/package.xml"/>
        <delete>
            <fileSet dir="${path}/settings/">
                <include name="PersonalJourney.settings"/>
                <include name="Search.settings"/>
                <!--<include name="OrgPreference.settings"/>-->
            </fileSet>
            <fileSet dir="${path}/permissionsets/">
                <include name="Process_Builder.permissionset"/>
            </fileSet>
        </delete>
        <replaceregexp
            match="${listView-regexp}"
            replace=""
            flags="g">
            <fileset dir="${path}/objects/">
                <include name="*.object"/>
            </fileset>
        </replaceregexp>
        <sound>
            <success source="${success-sound}"/>
            <fail source="${success-sound}"/>
        </sound>
    </target>

    <target name="validate">
        <sf:deploy
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            deployRoot="${path}"
            testLevel="RunLocalTests"
            rollbackOnError="true"
            ignoreWarnings="true"
            checkOnly="true" />
    </target>

    <target name="deploy">
        <sf:deploy
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            deployRoot="${path}"
            testLevel="RunLocalTests"
            rollbackOnError="true"
            ignoreWarnings="true"
            checkOnly="false" />
    </target>

    <target name="validateWtihTests">
        <sf:deploy
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            deployRoot="${path}"
            testLevel="RunSpecifiedTests"
            rollbackOnError="true"
            ignoreWarnings="true"
            checkOnly="true" >
            <runTest>BatchCreateAgentLookupsBasedOnPickliTest</runTest>
        </sf:deploy>
    </target>

    <target name="quickDeploy">
        <sf:deployRecentValidation
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            recentValidationId="${sf.recentValidationId}"/>
    </target>

    <target name="deployDangerous">
        <sf:deploy
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            deployRoot="${path}"
            testLevel="NoTestRun"
            ignoreWarnings="true"
            rollbackOnError="true"/>
    </target>

    <target name="deployCode">
        <sf:deploy username="${sf.username}" 
            password="${sf.password}" 
            sessionId="${sf.sessionId}" 
            serverurl="${sf.serverurl}" 
            maxPoll="${maxPoll}" 
            deployRoot="code" 
            testLevel="NoTestRun" 
            ignoreWarnings="true"
            rollbackOnError="true">
        </sf:deploy>
    </target>


    <target name="validateDangerous">
        <sf:deploy
            username="${sf.username}"
            password="${sf.password}"
            sessionId="${sf.sessionId}"
            serverurl="${sf.serverurl}"
            maxPoll="${maxPoll}"
            deployRoot="${path}"
            testLevel="NoTestRun"
            ignoreWarnings="true"
            checkOnly="true"
            rollbackOnError="true"/>
    </target>

    <target name="fun" if="funstarts" depends="test" >
        <sound>
            <success source="${user.home}/Downloads/horn.wav"/>
            <fail source="${user.home}/Downloads/ohno.wav"/>
        </sound>
        <property name="fun.done" value="true"/>
    </target>

    <target name="test" >
        <property name="fun.done" value="true"/>
        <property name="funstarts" value="true"/>
    </target>

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
        <mkdir dir="retrieveUnpackaged"/>
        <!-- Retrieve the contents into another directory -->
        <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <target name="deployWithSpecificTests">
        <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="the_dot" testLevel="RunSpecifiedTests" rollbackOnError="true">
            <runTest>B24MessageRouterTest</runTest> 
        </sf:deploy>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
        <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
        <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <target name="deployFromStaging">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="../staging/retrieveOutcome" rollbackOnError="true"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deployUnpackaged">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="retrieveUnpackaged" rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000" rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code with no TestLevel sepcified -->
    <target name="deployCodeNoTestLevelSpecified">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="codepkg" rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code and running tests only within the org namespace -->
    <target name="deployCodeRunLocalTests">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="codepkg" rollbackOnError="true"  testlevel="RunLocalTests" checkOnly="true" />
    </target>

    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="removecodepkg"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
        <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
        <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" retrieveTarget="codepkg" unpackaged="codepkg/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
        <!-- Upload the contents of the "codepkg" package, running all tests -->
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
        <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" deployRoot="codepkg" checkOnly="true"/>
    </target>

    <!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
    <target name="cancelDeploy">
        <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${maxPoll}" requestId="${sf.requestId}"/>
    </target>

</project>
